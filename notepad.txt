__________________________________
Making a language


What makes a language, a language?
  
  input -> f(x) -> output | f(x) is our program
        So a language is a way to define this function f(x)

  The question becomes then, how do we define such function?
  
What makes a function, a function? 

  - Variables   > A variable is a value of a certain type 
    What is a type?
      - definition of a group with certain characteristics
      - basically just tells the compiler how the variable can be used
    What types do we need? void, int, float, char, array, record
    Example: `4`, `'c'`

  - Operations  > An operation is function that takes input and transforms it into some output
    There are 2 types of operations:
      1. predefined: +, -, *, /, <, >, >=, <=
      2. custom: {operations}

  - Order       > A functions needs to know what to do and when
    How? We use a set of characters, keywords and calls
      - order characters: (), {}, ;
      - keywords: if, while, return
      - calls: operations and values can be given an identifier which can be called later 
 

Syntax overview

 - procedures:  `proc main (...) {}`
 - variables:   `param d = 1`



